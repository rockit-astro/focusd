#!/usr/bin/env python3
#
# This file is part of multifocusd.
#
# multifocusd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# multifocusd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with multifocusd.  If not, see <http://www.gnu.org/licenses/>.

"""Daemon for controlling a multi-channel focus controller via Pyro"""

import argparse
import datetime
import queue
import re
import threading
import traceback
import sys
import serial
import Pyro4
from warwick.observatory.common import log
from warwick.observatory.common.helpers import pyro_client_matches
from warwick.observatory.multifocus import CommandStatus, Config, FocuserStatus

# Set automatically when generating RPM package
SOFTWARE_VERSION = "UNKNOWN"

CHANNELS = [1, 2]
STATUS_REGEX = r'T1=(?P<T1>[+-]\d{6}),C1=(?P<C1>[+-]\d{6}),T2=(?P<T2>[+-]\d{6}),C2=(?P<C2>[+-]\d{6})'


class MultifocusDaemon:
    """Daemon interface for multi-channel focuser"""
    def __init__(self, config):
        self.wait_condition = threading.Condition()
        self._config = config
        self._regex = re.compile(STATUS_REGEX)

        self._state_lock = threading.Lock()
        self._state_date = datetime.datetime.min
        self._current_steps = [0 for _ in CHANNELS]
        self._target_steps = [0 for _ in CHANNELS]

        self._comm_lock = threading.Lock()
        self._command_queue = queue.Queue()
        self._result_queue = queue.Queue()
        self._move_complete_condition = threading.Condition()
        self._port = None

        threading.Thread(target=self.__run, daemon=True).start()

    def _open_connection(self):
        """
        Opens the serial connection to the focuser.
        Returns CommandStatus reflecting result
        """
        if self._port is not None:
            return CommandStatus.NotDisconnected

        try:
            port = serial.Serial(self._config.serial_port,
                                 self._config.serial_baud,
                                 timeout=self._config.serial_timeout)
            log.info(self._config.log_name, 'connected to controller')

            # Flush any stale state
            port.flushInput()
            port.flushOutput()

            with self._state_lock:
                self._port = port

            # Refresh state before considering the connection valid
            self._update_state()

            return CommandStatus.Succeeded
        except Exception as exception:
            print(f'Failed to read serial port ({exception})')
            if self._port is not None:
                self._port.close()
                self._port = None

            return CommandStatus.Failed

    def _close_connection(self):
        """
        Closes the serial connection to the focuser.
        Returns CommandStatus reflecting result
        """
        with self._state_lock:
            if self._port is None:
                return CommandStatus.NotConnected

            try:
                if self._port is not None:
                    self._port.close()
                    self._port = None
                return CommandStatus.Succeeded
            except Exception as exception:
                print(f'Failed to close serial port ({exception})')
                self._port = None
                return CommandStatus.Failed

    def _update_state(self):
        """Request and parse the status of the focus controller"""
        if self._port is None:
            return

        if self._port.write('?\n'.encode('ascii')) != 2:
            raise serial.SerialException('Failed to send query command')

        response = self._port.readline().decode('ascii').strip()
        match = self._regex.match(response)
        if not match:
            raise serial.SerialException(f'Failed to parse status result: `{response}`')

        with self._state_lock:
            self._state_date = datetime.datetime.utcnow()
            for i, c in enumerate(CHANNELS):
                self._current_steps[i] = int(match.group(f'C{c}'))
                self._target_steps[i] = int(match.group(f'T{c}'))

    def process_request(self, request, data):
        """
        Process a command sent by the user
        Returns a CommandStatus that is pushed to the results queue
        """
        if self._port is None:
            return CommandStatus.NotConnected

        # Only stop is valid when moving
        if request != 'stop':
            i = CHANNELS.index(data[0])
            if self._current_steps[i] != self._target_steps[i]:
                return CommandStatus.Blocked

        if request == 'stop':
            command = f'{data[0]}S\n'
        elif request == 'zero':
            command = f'{data[0]}Z\n'
        elif request == 'set':
            command = f'{data[0]}{data[1]:+07d}\n'
        elif request == 'offset':
            i = CHANNELS.index(data[0])
            command = f'{data[0]}{self._target_steps[i] + data[1]:+07d}\n'
        else:
            print(f'Unknown request `{request}`')
            return CommandStatus.Failed

        if self._port.write(command.encode('ascii')) != len(command):
            print('Failed to send command')
            return CommandStatus.Failed

        if self._port.readline().decode('ascii').strip() != '$':
            return CommandStatus.Failed

        return CommandStatus.Succeeded

    def __run(self):
        """Background thread managing communication over the serial connection"""
        delay = self._config.idle_loop_delay
        while True:
            try:
                request, data = self._command_queue.get(timeout=delay)
            except queue.Empty:
                request, data = None, None

            if request == 'connect':
                self._result_queue.put(self._open_connection())
                continue

            if request == 'disconnect':
                self._result_queue.put(self._close_connection())
                continue

            result = CommandStatus.NotConnected
            was_moving = any(self._current_steps[i] != t for i, t in enumerate(self._target_steps))
            is_moving = False
            try:
                # Refresh the state to ensure a valid view of the controller state before returning
                self._update_state()
                is_moving = self._port is not None and \
                    any(self._current_steps[i] != t for i, t in enumerate(self._target_steps))

                if request is not None:
                    result = self.process_request(request, data)

                    # Refresh the state to ensure a valid view of the controller state before returning
                    self._update_state()

            except Exception as exception:
                with self._state_lock:
                    if self._port is not None:
                        self._port.close()
                        self._port = None

                print(f'Failed to read serial port ({exception})')
                log.error(self._config.log_name, 'Lost serial connection')
                traceback.print_exc(file=sys.stdout)
            finally:
                if request is not None:
                    self._result_queue.put(result)

                if was_moving and not is_moving:
                    with self._move_complete_condition:
                        self._move_complete_condition.notify_all()

                delay = self._config.moving_loop_delay if is_moving else self._config.idle_loop_delay

    @Pyro4.expose
    def report_status(self):
        """Returns a dictionary containing the current focuser state"""
        with self._state_lock:
            data = {
                'date': datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ'),
                'software_version': SOFTWARE_VERSION
            }

            if self._port is not None:
                for i, c in enumerate(CHANNELS):
                    moving = self._target_steps[i] != self._current_steps[i]
                    data.update({
                        f'status_{c}': FocuserStatus.Moving if moving else FocuserStatus.Idle,
                        f'target_steps_{c}': self._target_steps[i],
                        f'current_steps_{c}': self._current_steps[i]
                    })
            else:
                for c in CHANNELS:
                    data[f'status_{c}'] = FocuserStatus.Disabled

            return data

    @Pyro4.expose
    def set_focus(self, channel, steps, offset=False):
        """Request a focuser channel to move a specific step position"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        if channel not in CHANNELS:
            return CommandStatus.InvalidChannel

        with self._comm_lock:
            self._command_queue.put(('offset' if offset else 'set', (channel, steps)))
            result = self._result_queue.get()

        if result != CommandStatus.Succeeded:
            return result

        start = datetime.datetime.utcnow()
        i = CHANNELS.index(channel)

        while True:
            with self._move_complete_condition:
                self._move_complete_condition.wait(1)

            if self._current_steps[i] == self._target_steps[i]:
                break

            if self._port is None:
                return CommandStatus.Failed

            if (datetime.datetime.utcnow() - start).total_seconds() > self._config.move_timeout:
                return CommandStatus.Failed

        return CommandStatus.Succeeded

    @Pyro4.expose
    def reset_home_position(self, channel):
        """Request a focuser channel to reset its home position to its current position"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        if channel not in CHANNELS:
            return CommandStatus.InvalidChannel

        with self._comm_lock:
            self._command_queue.put(('zero', (channel, None)))
            return self._result_queue.get()

    @Pyro4.expose
    def stop_channel(self, channel):
        """Stop any in progress movement"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        if channel not in CHANNELS:
            return CommandStatus.InvalidChannel

        with self._comm_lock:
            self._command_queue.put(('stop', (channel, None)))
            return self._result_queue.get()

    @Pyro4.expose
    def initialize(self):
        """Connects to the focuser hardware"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        with self._comm_lock:
            self._command_queue.put(('connect', None))
            return self._result_queue.get()

    @Pyro4.expose
    def shutdown(self):
        """Disconnects from the focuser hardware"""
        if not pyro_client_matches(self._config.control_ips):
            return CommandStatus.InvalidControlIP

        with self._comm_lock:
            self._command_queue.put(('disconnect', None))
            return self._result_queue.get()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Focus Server')
    parser.add_argument('config', help='Path to configuration json file')
    args = parser.parse_args()
    _config = Config(args.config)
    _config.daemon.launch(MultifocusDaemon(_config))
