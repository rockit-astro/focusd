#!/usr/bin/env python3
#
# This file is part of the Robotic Observatory Control Kit (rockit)
#
# rockit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# rockit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rockit.  If not, see <http://www.gnu.org/licenses/>.

"""Commandline client for controlling a multi-channel focus controller"""

import datetime
import glob
import json
import os
import sys
import Pyro4
from rockit.common import TFmt
from rockit.focuser import Config, CommandStatus, FocuserStatus


SCRIPT_NAME = os.path.basename(sys.argv[0])
sys.excepthook = Pyro4.util.excepthook


def run_command(command, args):
    """Runs a daemon command, handling error messages"""
    if 'FOCUSD_CONFIG_PATH' in os.environ:
        config = Config(os.environ['FOCUSD_CONFIG_PATH'])
    else:
        # Load the config file defined in the PIPELINED_CONFIG_PATH environment variable or from the
        # default system location (/etc/pipelined/). Exit with an error if zero or multiple are found.
        files = glob.glob("/etc/focusd/*.json")
        if len(files) != 1:
            print('error: failed to guess the default config file. ' +
                  'Run as FOCUSD_CONFIG_PATH=/path/to/config.json pipeline <command>')
            return 1

        config = Config(files[0])

    try:
        ret = command(config, range(1, config.channels + 1), args)
    except Pyro4.errors.CommunicationError:
        ret = -101

    # Print message associated with error codes, except for -1 (error handled locally)
    if ret not in [-1, 0]:
        print(CommandStatus.message(ret))
    sys.exit(ret)


def print_status(config, channels, _):
    """Prints a human-readable summary of the focuser status"""
    with config.daemon.connect() as focusd:
        data = focusd.report_status()
        temperature_labels = focusd.temperature_labels()

    print(f'Focuser is {FocuserStatus.label(data[f"status"], True)}')
    if data['status'] == FocuserStatus.Active:
        for c in channels:
            label = f'Channel {c}: '
            channel_steps = data[f'current_steps_{c}']
            channel_target = data[f'target_steps_{c}']
            channel_moving = data[f'moving_{c}']
            label += TFmt.Bold + (TFmt.Yellow if channel_moving else '')
            label += f'{channel_steps:+07d}{TFmt.Clear} steps'
            if channel_moving:
                label += f' (moving to {TFmt.Bold}{channel_target:+07d}{TFmt.Clear} steps)'

            print(label)
        print(f' OTA Fans: {TFmt.Bold}{"ENABLED" if data["fans_enabled"] else "DISABLED"}{TFmt.Clear}')
        if temperature_labels:
            print('Temperature Probes:')
            max_label_length = max([len(label) for label in temperature_labels.values()])
            for key, label in temperature_labels.items():
                padding = ''.join([' '] * (max_label_length + 3 - len(label)))
                value = data['temperature'][key]
                if value is not None:
                    print(padding + f'{label}: {TFmt.Bold}{round(value, 1)}{TFmt.Clear} \u00B0C')
                else:
                    print(padding + f'{label}: {TFmt.Bold}UNKNOWN{TFmt.Clear}')

    return 0


def print_json(config, *_):
    """Prints a machine-readable summary of the focuser status"""
    with config.daemon.connect() as focusd:
        print(json.dumps(focusd.report_status() or {}))

    return 0


def set_position(config, channels, args):
    """Request a focuser channel to move a specific step position"""
    try:
        if len(args) == 2 and int(args[0]) in channels:
            channel = int(args[0])
            position = int(args[1])

            try:
                with config.daemon.connect(timeout=0) as focusd:
                    return focusd.set_focus(channel, position)
            except KeyboardInterrupt:
                # ctrl-c terminates the running command
                with config.daemon.connect() as focusd:
                    return focusd.stop_channel(channel)
    except ValueError:
        pass
    print(f'usage: {SCRIPT_NAME} set ({"|".join([str(c) for c in channels])}) <step position>')
    return -1


def offset_position(config, channels, args):
    """Request a focuser channel to move by a specific step delta"""
    try:
        if len(args) == 2 and int(args[0]) in channels:
            channel = int(args[0])
            delta = int(args[1])

            try:
                with config.daemon.connect(timeout=0) as focusd:
                    return focusd.set_focus(channel, delta, offset=True)
            except KeyboardInterrupt:
                # ctrl-c terminates the running command
                with config.daemon.connect() as focusd:
                    return focusd.stop_channel(channel)
    except ValueError:
        pass
    print(f'usage: {SCRIPT_NAME} offset ({"|".join([str(c) for c in channels])}) <step delta>')
    return -1


def stop(config, channels, args):
    """Stop a focuser channel"""
    try:
        if len(args) == 1 and int(args[0]) in channels:
            with config.daemon.connect() as focusd:
                return focusd.stop_channel(int(args[0]))
    except ValueError:
        pass

    print(f'usage: {SCRIPT_NAME} stop ({"|".join([str(c) for c in channels])})')
    return -1


def set_home_position(config, channels, args):
    """Sets the current focuser position to the home position"""
    try:
        if len(args) == 1 and int(args[0]) in channels:
            with config.daemon.connect() as focusd:
                return focusd.reset_home_position(int(args[0]))
    except ValueError:
        pass

    print(f'usage: {SCRIPT_NAME} zero ({"|".join([str(c) for c in channels])})')
    return -1


def list_focuser_channels(config, channels, _):
    print(" ".join([str(c) for c in channels]))
    return 0


def enable_fans(config, channels, args):
    """Enable or disable OTA fans"""
    if len(args) == 1 and args[0] in ['enable', 'disable']:
        with config.daemon.connect() as focusd:
            return focusd.enable_fans(args[0] == 'enable')

    print(f'usage: {SCRIPT_NAME} fans <enable|disable>')
    return -1


def initialize(config, *_):
    """Connect to the focuser"""
    with config.daemon.connect() as focusd:
        return focusd.initialize()


def shutdown(config, *_):
    """Disconnect from the focuser"""
    with config.daemon.connect() as focusd:
        return focusd.shutdown()


def print_usage():
    """Prints the utility help"""
    print(f'usage: {SCRIPT_NAME} <command> [<args>]')
    print()
    print('general commands:')
    print('   set          request the focuser to move to a given absolute position')
    print('   offset       request the focuser to move by a given offset delta')
    print('   stop         request the focuser to stop moving')
    print('   status       print a human-readable summary of the focuser status')
    print('   json         print a machine-readable summary of the focuser status')
    print('   fans         enable or disable the OTA fans')
    print('engineering commands:')
    print('   zero         sets the current focuser position to the home position')
    print('   init         connect to the focuser')
    print('   kill         disconnect from the focuser')
    print()

    return 0


if __name__ == '__main__':
    commands = {
        'set': set_position,
        'offset': offset_position,
        'stop': stop,
        'status': print_status,
        'json': print_json,
        'zero': set_home_position,
        'fans': enable_fans,
        'list-channels': list_focuser_channels,
        'init': initialize,
        'kill': shutdown
    }

    if len(sys.argv) >= 2 and sys.argv[1] in commands:
        sys.exit(run_command(commands[sys.argv[1]], sys.argv[2:]))

    sys.exit(print_usage())
